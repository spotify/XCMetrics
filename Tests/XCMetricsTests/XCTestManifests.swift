#if !canImport(ObjectiveC)
import XCTest

extension AddMetadataEffectHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AddMetadataEffectHandlerTests = [
        ("testAppendsTagFromContext", testAppendsTagFromContext),
        ("testLeavesTagEmptyForMissingTagInContext", testLeavesTagEmptyForMissingTagInContext),
    ]
}

extension BuildHostFetcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuildHostFetcherTests = [
        ("testCpuModel", testCpuModel),
        ("testCpuNumber", testCpuNumber),
        ("testCPUSpeedGhz", testCPUSpeedGhz),
        ("testHostArchitecture", testHostArchitecture),
        ("testHostModel", testHostModel),
        ("testHostOS", testHostOS),
        ("testHostOSFamily", testHostOSFamily),
        ("testHostOSVersion", testHostOSVersion),
        ("testIsVirtual", testIsVirtual),
        ("testMemoryFreeMb", testMemoryFreeMb),
        ("testMemoryTotalMb", testMemoryTotalMb),
        ("testSwapTotalMb", testSwapTotalMb),
        ("testTimeZone", testTimeZone),
        ("testUptimeSeconds", testUptimeSeconds),
    ]
}

extension CacheLogsEffectHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CacheLogsEffectHandlerTests = [
        ("testCacheLogsCachesCurrentLog", testCacheLogsCachesCurrentLog),
        ("testCacheLogsCachesPreviousLogs", testCacheLogsCachesPreviousLogs),
        ("testCacheLogsReportsNotAlreadyCachedLog", testCacheLogsReportsNotAlreadyCachedLog),
    ]
}

extension ExecutePluginsEffectHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExecutePluginsEffectHandlerTests = [
        ("testExecutePlugins", testExecutePlugins),
    ]
}

extension LogManagerImplementationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LogManagerImplementationTests = [
        ("testCacheCopiesLog", testCacheCopiesLog),
        ("testCacheCopiesMultipleFilesWithoutRetries", testCacheCopiesMultipleFilesWithoutRetries),
        ("testCacheLogsDoesNotRetryIfSeriousErrorsDuringCopying", testCacheLogsDoesNotRetryIfSeriousErrorsDuringCopying),
        ("testCacheLogsRetriesLimitedTimesOnCopying", testCacheLogsRetriesLimitedTimesOnCopying),
        ("testCacheLogsRetriesOnNonValidLogOnCopying", testCacheLogsRetriesOnNonValidLogOnCopying),
        ("testCacheRetriesIfSomeFileIsInvalidOnCopying", testCacheRetriesIfSomeFileIsInvalidOnCopying),
        ("testLogsToUploadRetrieval", testLogsToUploadRetrieval),
        ("testPartialCopyIsDoneOnExceededRetries", testPartialCopyIsDoneOnExceededRetries),
        ("testRetrivingAlreadyExistingFreshLogReturnsImmediatelly", testRetrivingAlreadyExistingFreshLogReturnsImmediatelly),
        ("testRetrivingExistingXcodeLogOlderThan2SecondsIsTreatedAsOther", testRetrivingExistingXcodeLogOlderThan2SecondsIsTreatedAsOther),
        ("testRetrivingExistingXcodeLogsSelectsLastFileAsCurrent", testRetrivingExistingXcodeLogsSelectsLastFileAsCurrent),
        ("testRetrivingExistingXcodeLogsSelectsLastFileAsCurrentFromArchiveDirectory", testRetrivingExistingXcodeLogsSelectsLastFileAsCurrentFromArchiveDirectory),
        ("testRetrivingXcodeLogsNewlyAppearedFileRecognizesAsCurrent", testRetrivingXcodeLogsNewlyAppearedFileRecognizesAsCurrent),
        ("testRetrivingXcodeLogsNewlyAppearedFileWithNotNewerDateIsSkipped", testRetrivingXcodeLogsNewlyAppearedFileWithNotNewerDateIsSkipped),
        ("testRetrivingXcodeLogsRecognizesLogsOnlyWithXcactivityExtension", testRetrivingXcodeLogsRecognizesLogsOnlyWithXcactivityExtension),
        ("testRetrivingXcodeLogsSearchesInLogsBuildDirectories", testRetrivingXcodeLogsSearchesInLogsBuildDirectories),
        ("testRetrivingXcodeLogsTriesTimeoutTimes", testRetrivingXcodeLogsTriesTimeoutTimes),
        ("testRetrivingXcodeLogsWithUnspecifiedModifiedDataMarksAsOtherLogs", testRetrivingXcodeLogsWithUnspecifiedModifiedDataMarksAsOtherLogs),
    ]
}

extension LogsFinderEffectHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LogsFinderEffectHandlerTests = [
        ("testHandleFindLogsWithLastLogAdded", testHandleFindLogsWithLastLogAdded),
    ]
}

extension LogsTaggerEffectHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LogsTaggerEffectHandlerTests = [
        ("testTagLogsAsUploaded", testTagLogsAsUploaded),
    ]
}

extension MetricsUploaderLogicTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MetricsUploaderLogicTests = [
        ("testCacheLogs", testCacheLogs),
        ("testCacheLogsWithCurrentLog", testCacheLogsWithCurrentLog),
        ("testCacheLogsWithCurrentLogAndReturnMaximumNumberOfLogs", testCacheLogsWithCurrentLogAndReturnMaximumNumberOfLogs),
        ("testCleanUpLogs", testCleanUpLogs),
        ("testFindLogs", testFindLogs),
        ("testInitiator", testInitiator),
        ("testTagLogsAsUploaded", testTagLogsAsUploaded),
        ("testUploadLogs", testUploadLogs),
    ]
}

extension URLUtilsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__URLUtilsTests = [
        ("testMakeBuildLogsDirectory", testMakeBuildLogsDirectory),
        ("testMakeBuildLogsDirectoryWhenArchiving", testMakeBuildLogsDirectoryWhenArchiving),
    ]
}

extension UploadMetricsEffectHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UploadMetricsEffectHandlerTests = [
        ("testHandleFindLogsWithLastLogAdded", testHandleFindLogsWithLastLogAdded),
    ]
}

extension UploadedLogTaggerEffectHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UploadedLogTaggerEffectHandlerTests = [
        ("testTagLogsAsUploaded", testTagLogsAsUploaded),
    ]
}

extension XCMetricsArgumentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__XCMetricsArgumentTests = [
        ("testDoesNotFailWhenProvidedWithMandatoryArguments", testDoesNotFailWhenProvidedWithMandatoryArguments),
        ("testDoesNotFailWhenProvidedWithOptionalArguments", testDoesNotFailWhenProvidedWithOptionalArguments),
        ("testFailWhenNoArgumentsAreProvided", testFailWhenNoArgumentsAreProvided),
        ("testFailWhenNoNameIsProvided", testFailWhenNoNameIsProvided),
        ("testFailWhenNotKnownArgumentIsProvided", testFailWhenNotKnownArgumentIsProvided),
    ]
}

extension XCMetricsCommandTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__XCMetricsCommandTests = [
        ("testDoesNotFailWhenProvidedWithMandatoryArguments", testDoesNotFailWhenProvidedWithMandatoryArguments),
        ("testDoesNotFailWhenProvidedWithOptionalArguments", testDoesNotFailWhenProvidedWithOptionalArguments),
        ("testFailWhenNoArgumentsAreProvided", testFailWhenNoArgumentsAreProvided),
        ("testFailWhenNoNameIsProvided", testFailWhenNoNameIsProvided),
        ("testSucceedWhenNoBuildDirIsProvided", testSucceedWhenNoBuildDirIsProvided),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AddMetadataEffectHandlerTests.__allTests__AddMetadataEffectHandlerTests),
        testCase(BuildHostFetcherTests.__allTests__BuildHostFetcherTests),
        testCase(CacheLogsEffectHandlerTests.__allTests__CacheLogsEffectHandlerTests),
        testCase(ExecutePluginsEffectHandlerTests.__allTests__ExecutePluginsEffectHandlerTests),
        testCase(LogManagerImplementationTests.__allTests__LogManagerImplementationTests),
        testCase(LogsFinderEffectHandlerTests.__allTests__LogsFinderEffectHandlerTests),
        testCase(LogsTaggerEffectHandlerTests.__allTests__LogsTaggerEffectHandlerTests),
        testCase(MetricsUploaderLogicTests.__allTests__MetricsUploaderLogicTests),
        testCase(URLUtilsTests.__allTests__URLUtilsTests),
        testCase(UploadMetricsEffectHandlerTests.__allTests__UploadMetricsEffectHandlerTests),
        testCase(UploadedLogTaggerEffectHandlerTests.__allTests__UploadedLogTaggerEffectHandlerTests),
        testCase(XCMetricsArgumentTests.__allTests__XCMetricsArgumentTests),
        testCase(XCMetricsCommandTests.__allTests__XCMetricsCommandTests),
    ]
}
#endif
